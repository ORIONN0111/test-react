import * as React from 'react';
import secToMs from './utils/secToMs';
import { ALL, DEFAULT_DURATION, DEFAULT_EASE_TYPE } from './constants';
export default function useAnimate(props) {
    const { start, end, complete, onComplete, delay = 0, duration = DEFAULT_DURATION, easeType = DEFAULT_EASE_TYPE, } = props;
    const transition = React.useMemo(() => `${ALL} ${duration}s ${easeType} ${delay}s`, [duration, easeType, delay]);
    const [animate, setAnimate] = React.useState({
        isPlaying: false,
        style: Object.assign(Object.assign({}, start), { transition }),
    });
    const { isPlaying, style } = animate;
    const onCompleteTimeRef = React.useRef();
    React.useEffect(() => {
        if ((onCompleteTimeRef.current || complete) && isPlaying) {
            onCompleteTimeRef.current = setTimeout(() => {
                if (onComplete) {
                    onComplete();
                }
                if (complete) {
                    setAnimate(Object.assign(Object.assign({}, animate), { style: complete }));
                }
            }, secToMs(delay + duration));
        }
        return () => onCompleteTimeRef.current && clearTimeout(onCompleteTimeRef.current);
    }, [isPlaying]);
    return {
        isPlaying,
        style,
        play: React.useCallback((isPlaying) => {
            setAnimate(Object.assign(Object.assign({}, animate), { style: Object.assign(Object.assign({}, (isPlaying ? end : start)), { transition }), isPlaying }));
        }, []),
    };
}
//# sourceMappingURL=useAnimate.js.map