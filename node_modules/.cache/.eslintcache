[{"/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/index.js":"1","/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/reportWebVitals.js":"2","/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/components/App.js":"3","/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/components/Map.js":"4"},{"size":546,"mtime":1657814303678,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1655154742262,"results":"7","hashOfConfig":"6"},{"size":6198,"mtime":1662440641547,"results":"8","hashOfConfig":"6"},{"size":778,"mtime":1657812878321,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"xkaoi4",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/index.js",[],[],[],"/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/reportWebVitals.js",[],[],"/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/components/App.js",["24","25","26","27","28","29","30","31"],[],"// import logo from './logo.svg';\nimport styles from '../App.css';\nimport pic from \"../Images/image.png\";\n// import { type } from '@testing-library/user-event/dist/type';\nimport { useForm, Controller } from 'react-hook-form';\n// import Map from \"./Map\";\nimport data from \"../data2.json\";\nimport { useState } from 'react';\n// import { DevTool } from '@hookform/devtools';\nimport {\n  TextField,\n  Autocomplete,\n  inputAdornmentClasses,\n} from '@mui/material';\nimport LeaderLine from \"leader-line-new\";\nvar sendId = 0;\n\nfunction App() {\n\n  let link = [];\n  // const initialLinks: LeaderLine[] = [];\n  // const [links, setLinks] = useState(initialLinks);\n\n  const [count, setNum] = useState(0);\n  const { control, handleSubmit, setValue, getValues } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      single: {},\n    },\n  });\n\n  // const handleClickOpen = () => {\n  //   // setOpen(true);\n  //   // console.log('handleC');\n  // };\n  // const handleClose = () => {\n  //   // setOpen(false);\n  //   // console.log('handleClo');\n  // };\n  const handleChange = (e) => {\n    // console.log(e.target.id);\n    sendId = e.target.id;\n    const new_count = e.target.id;\n    // // gvu\n    // if (links.length > 0){\n    //   links.filter(l => {\n    //     l.remove();\n    //   })\n    // }\n    // link.push(new LeaderLine(\n    //               document.getElementById(\"3\"),\n    //               document.getElementById(String(new_count-1)),\n    //               {dash: {animation: true}}));\n    // setLinks(link);\n    // // lll\n\n    setNum(new_count);\n    // console.log(setNum);\n  };\n\n  // const handleDisply = (e) =>{\n  //   console.log(document.getElementById(\"3\"));\n  //           //ラインを引く\n  //           let nodeLine = [];\n\n  //           // console.log(document.getElementById(\"3\"));\n\n\n  //           // nodeLine.push(new LeaderLine(\n  //           //   document.getElementById(\"3\"),\n  //           //   document.getElementById(\"9\"),\n  //           //   {dash: {animation: true}}));\n  //           // setLinks(nodeLine);\n  //           // setNum(4);\n            \n  //           for (let i = 0; i < data.place.length; i++) {\n  //             const elements = data.place[i];\n  //             // console.log(elements.node);\n  //             if(elements.node.length<=0) continue;\n  //             for (let e = 0; e < elements.node.length; e++) {\n  //             nodeLine.push(new LeaderLine(\n  //             document.getElementById(String(elements.id-1)),\n  //             document.getElementById(String(elements.node[e]-1)),\n  //             {dash: {animation: true}}));\n  //             }\n  //           }\n  //           // setLinks(nodeLine);\n  //           // setNum(1000);\n  // }\n\n\n  const gps = () => {\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n  }\n\n  // 取得に成功した場合の処理\nfunction successCallback(position){\n  // 緯度と経度を取得し画面に表示\n  var latitude = position.coords.latitude - 35.1835865;\n  var longitude = position.coords.longitude - 137.1118045;\n  let myPos = [];\n  myPos.push(<div\n    key={\"myPos\"}\n    className='base-place'\n    style={{left:latitude,top:longitude,backgroundColor:'blue'}}\n    id={\"myPos\"}\n  >\n    {/* {String(i+1)} */}\n    </div>)\n};\n\n// 取得に失敗した場合の処理\nfunction errorCallback(error){\n  alert(\"位置情報が取得できませんでした\");\n};\n\n  const { innerWidth: width} = window;\n  var imagevw = 925\n  var imagevh = 588\n  const height = width * imagevh / imagevw\n  // let count = 40\n\n  return (\n    <div className='base'>\n\n    <img src={pic} alt=\"map\" className='map'></img>\n    {function(e) {\n\n      //点を置く\n      // if(e=!null) sendId = e.id\n      // console.log(sendId);\n      let list = []\n      // let name\n      for (let i = 0; i < data.place.length; i++) {\n        // const pos1 = {left:228 * width / imagevw, top:200 * height / imagevh};\n        let w = data.place[i].x * width / imagevw;\n        let h = data.place[i].y * height / imagevh;\n        if(!data.place[i].info.length){\n          list.push(<div\n            key={list}\n            className='base-place'\n            style={{left:w,top:h,backgroundColor:'blue'}}\n            id={String(i)}\n          >\n            {/* {String(i+1)} */}\n            </div>)\n        }else if(sendId==data.place[i].id){\n          list.push(<div\n            key={list}\n            className='base-place'\n            style={{left:w,top:h,backgroundColor:'red'}}\n            id={String(i)}\n          >\n            {/* {String(i+1)} */}\n            </div>)\n        }else{\n        list.push(<div\n          key={list}\n          className='base-place'\n          style={{left:w,top:h,backgroundColor:'green'}}\n          id={String(i)}\n        >\n          {/* {String(i+1)} */}\n          </div>)\n        }\n      }\n      return list\n    }()}    \n    <form onSubmit={handleSubmit(handleChange)}>\n    <Controller\n      control={control}\n      name=\"single\"\n      render={({ props }) => (\n        <Autocomplete\n          fullWidth\n          options={data.place}\n          renderOption={(props, option) => {\n            return (\n              <li {...props} key={option.id} id={option.id}>\n                {option.label}\n              </li>\n              );\n            }}\n          renderInput={(params) => <TextField {...params} label=\"施設名\" />}\n          onChange={(e) => handleChange(e)}\n          />\n          )}\n        />\n       </form>\n       {/* 経路探索用\n    <button onClick={(e) => (handleDisply(e))}>矢印表示</button> */}\n    <button onClick={() => (gps())}>GPS取得</button>\n    </div>\n  );\n}\n\n// document.getElementById(\"gps\").onclick = function(){\n//   // 位置情報を取得する\n//   navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n// };\n// // 取得に成功した場合の処理\n// function successCallback(position){\n//   // 緯度を取得し画面に表示\n//   var latitude = position.coords.latitude;\n//   document.getElementById(\"latitude\").innerHTML = latitude;\n//   // 経度を取得し画面に表示\n//   var longitude = position.coords.longitude;\n//   document.getElementById(\"longitude\").innerHTML = longitude;\n// };\n\nexport default App;\n","/Users/x19012xx/Documents/GitHub/orionn0111.github.io/test-react/src/components/Map.js",["32","33","34"],[],{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":14},{"ruleId":"35","severity":1,"message":"39","line":13,"column":3,"nodeType":"37","messageId":"38","endLine":13,"endColumn":24},{"ruleId":"35","severity":1,"message":"40","line":15,"column":8,"nodeType":"37","messageId":"38","endLine":15,"endColumn":18},{"ruleId":"35","severity":1,"message":"41","line":20,"column":7,"nodeType":"37","messageId":"38","endLine":20,"endColumn":11},{"ruleId":"35","severity":1,"message":"42","line":24,"column":10,"nodeType":"37","messageId":"38","endLine":24,"endColumn":15},{"ruleId":"35","severity":1,"message":"43","line":25,"column":34,"nodeType":"37","messageId":"38","endLine":25,"endColumn":42},{"ruleId":"35","severity":1,"message":"44","line":25,"column":44,"nodeType":"37","messageId":"38","endLine":25,"endColumn":53},{"ruleId":"45","severity":1,"message":"46","line":147,"column":24,"nodeType":"47","messageId":"48","endLine":147,"endColumn":26},{"ruleId":"35","severity":1,"message":"42","line":8,"column":9,"nodeType":"37","messageId":"38","endLine":8,"endColumn":14},{"ruleId":"35","severity":1,"message":"49","line":15,"column":11,"nodeType":"37","messageId":"38","endLine":15,"endColumn":15},{"ruleId":"35","severity":1,"message":"50","line":17,"column":15,"nodeType":"37","messageId":"38","endLine":17,"endColumn":19},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'inputAdornmentClasses' is defined but never used.","'LeaderLine' is defined but never used.","'link' is assigned a value but never used.","'count' is assigned a value but never used.","'setValue' is assigned a value but never used.","'getValues' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'name' is defined but never used.","'pos1' is assigned a value but never used."]